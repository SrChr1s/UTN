<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHyAAAAEAIAAoEAAAFgAAACgAAAAfAAAAQAAAAAEAIAAAAAAAgA8AAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABISEgAXFxcHFRUVHhYWFhwfHx8EEBAQAAAA
        AAMAAAAVBgYGCQAAAAAICAgQAwMDDzs7OwEFBQUSCAgIDwAAAABPT08AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABISEgAUFBQNBgYGkQUFBc4FBQXOBwcHc1lZ
        WQEAAAAbAAAAuwYGBlAAAAAABwcHkAMDA4IRERElAwMDvQcHB4MAAAAAUFBQAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgYACQkJPQICAusKCgpjCAgIhgIC
        At0NDQ0cAAAAHwAAAOIGBgZhAAAAAAcHB64FBQWoBgYGnAEBAf8HBwedAAAAAE9PTwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAAcHB0wCAgLrCgoKLw4O
        DlkBAQHnAAAAJgAAAB4AAADiBgYGYQAAAAAHBwerAwMD7gQEBNMCAgLYBwcHnwAAAABPT08AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgAHBwdMAgIC6woK
        CjAODg5ZAQEB5QcHB2MAAACVAAAA8QEBAbcJCQlkCAgIrwEBAfwICAhnAAAArAcHB6EAAAAAT09PAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEAA0NDQgBAQETBQUFRAIC
        AqQHBwcqDg4ONgEBAYkKCgpqAwMDtwICArQCAgK4CQkJhwkJCW4DAwN7DAwMFAAAAH4GBgZ3BQUFFgoK
        Cg0AAAAAiYmJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAAODg5IAQEB0wAA
        ANUAAADZAgICh2hoaAEAAAAADAwMZgICAtsCAgLZAgIC3QUFBZYtLS0EAQEBAAgICFMAAADVAAAA1QAA
        ANkGBgZ9AAAAAJWVlQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQACgoKSwEB
        AfoAAAD/AAAA/wQEBL0gICAKAAAAAAoKCngAAAD/AAAA/wAAAP8DAwOxKSkpBAAAAAAHBweBAAAA/wAA
        AP8AAAD/BQUFiQAAAACZmZkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgoKAA0N
        DTMCAgLuAAAA/wAAAP8CAgLoDQ0NLwAAAAAKCgp3AAAA/wAAAP8AAAD/AwMDsS4uLgMZGRkNBAQEvQAA
        AP8AAAD/AAAA/wgICGsAAAAAk5OTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQU
        FAAUFBQVAwMD0QAAAP8AAAD/AAAA/wcHB4wAAAAACgoKdwAAAP8AAAD/AAAA/wMDA7Fra2sCCQkJUwEB
        AfUAAAD/AAAA/wEBAfMKCgo/BwcHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAmJiYA////AAUFBZMAAAD/AAAA/wAAAP8CAgLvCwsLWQsLC3gAAAD/AAAA/wAAAP8DAwOwEBAQNQMD
        A9IAAAD/AAAA/wAAAP8DAwPKExMTExISEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAYGBgALCws9AgIC7QAAAP8AAAD/AAAA/wICAugFBQXPAAAA/wAAAP8AAAD/AwMD3gQE
        BNYAAAD/AAAA/wAAAP8BAQH+BwcHcwAAAAAyMjIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAcHBwALS0tBAYGBpAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/BAQEwxERERgODg4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAAQEBAaBAQEuQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AwMD3gwMDD0AAAAAOzs7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABnZ2cAAwMDAA4ODiIFBQWwAQEB+wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AwMD0gwMDEMAAAAAIyMjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgY4AAAAkAAAAJAAAACNAgICogEBAe4AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AQEB+gMDA7cAAACNAAAAkAAAAJMAAABcAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGYgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApAAAAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGBmIAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKMAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBgZiAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACkAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgYGPgAAAKIAAACiAAAAoAIC
        Aq0CAgLuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAfoDAwO9AAAAnwAAAKIAAAClAAAAaAAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAAYGBgAAAAABERERAA4O
        DhoGBgahAQEB+QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8BAQH+BAQExg0NDTYAAAAAAAAAAQAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQABUV
        FRIEBASqAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8EBATSDQ0NMQQE
        BABBQUEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHh4eAEtL
        SwIGBgaCAQEB/QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wQE
        BLcUFBQSERERAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcH
        BwALCws0AgIC5wAAAP8AAAD/AAAA/wEBAfAEBATbAAAA/wAAAP8AAAD/AgIC5QMDA+IAAAD/AAAA/wAA
        AP8BAQH7CAgIZwAAAABCQkIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYm
        JgAAAAAABgYGiwAAAP8AAAD/AAAA/wEBAfQKCgpqCwsLfAAAAP8AAAD/AAAA/wMDA7EMDAxEAgIC3AAA
        AP8AAAD/AAAA/wMDA8MVFRUPFBQUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAUFBQAFBQUEwMDA8wAAAD/AAAA/wAAAP8GBgaZd3d3AgoKCncAAAD/AAAA/wAAAP8DAwOxV1dXAwgI
        CGABAQH4AAAA/wAAAP8BAQHxCwsLOggICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAACgoKAA0NDTACAgLsAAAA/wAAAP8CAgLrDAwMNgAAAAAKCgp3AAAA/wAAAP8AAAD/AwMDsTEx
        MQMUFBQQAwMDxAAAAP8AAAD/AQEB/wgICGcAAAAAurq6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAQEBAAKCgpJAQEB+QAAAP8AAAD/BAQEwRoaGgwAAAAACgoKdwAAAP8AAAD/AAAA/wMD
        A7EqKioEAAAAAAYGBocAAAD/AAAA/wAAAP8FBQWHAAAAAJKSkgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAFBQUADw8PTQICAuMBAQHlAQEB6QQEBJNZWVkBAAAAAAsLC2sBAQHoAQEB5QEB
        AekEBASfLCwsBAICAgAKCgpaAgIC5QEBAeUBAQHpBwcHhQAAAACUlZQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAEBAQABgYGAwNDQ0kDAwMJAwMDCUMDAwWAwMDAAICAgAVFRURDAwMJAwM
        DCQMDAwlDw8PGTc3NwEODg4AERERDQwMDCQMDAwkDAwMJRQUFBUAAAAAjIyMAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP+EQf7/AEH+/wBB/v8AQf7/AAH+/AAAfvwIEH78CBB+/AgAfvwIAH7+AAB+/gAA/v4A
        AP7/AAH+/4AD/vwAAD78AAA+/AAAPvwAAD78AAA+/oACfv8AAf7+AAD+/gAA/v4AAH78AAB+/AgAfvwI
        EH78CBB+/BgQfv////7////+
</value>
  </data>
</root>